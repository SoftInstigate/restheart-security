## uIAM Configuration File.
---
#### Listeners

# Listeners allow to specify the protocol, ip, port and to use.
# The supported protocols are: http, https and ajp. You can setup a listener per protocol (up to 3).

# WARNING: uIAM uses basic authentication; usernames and passwords are sent over the net on each request.
# Using the http listener is not secure: users credentials can be sniffed by a man-in-the-middle attack.
# Use the http listener only on trusted environments.

https-listener: true
https-host: 0.0.0.0
https-port: 4443

http-listener: true
http-host: 0.0.0.0
http-port: 8080

ajp-listener: false
ajp-host: 0.0.0.0
ajp-port: 8009

#### Instance name

# The name of this uIAM instance. displayed in log, also allows to implement instance specific custom code
# For instance, an email notifier hook can send emails to a test email address in development environments

instance-name: develop

# Use proxies to proxy external resources
# internal-uri is an absolute path (eg. /uiam)
# external-url is a resource URL (eg. https://uiam.io)
# TODO allow adding more hosts for load balancing
proxies:
    - internal-uri: /pdump
      external-url: http://127.0.0.1:8080/dump
    - internal-uri: /restheart
      external-url: https://restheart.org

#### use Ansi console for logging. Default to 'true' if parameter missing, for backward compatibility

ansi-console: true

#### Allow unescaped characters in URL
# Starting with Undertow 1.4.23 URLs validation became much stricter.
# However, this is breaking existing clients. Now you can decide which behaviour you prefer

allow-unescaped-characters-in-url: true

#### SSL Configuration

# Configure the keystore to enable the https listener.

# uIAM comes with a self-signed certificate that makes straightforward enabling https.
# Specify use-embedded-keystore: true to use it (this is the default setting).
# Using the self-signed certificate leads to issues with some clients;
# for instance, with curl you need to specify the "--insecure" option or you'll get an error message.

use-embedded-keystore: true

# To use your own certificate you need to import it (and eventually the CA certificates chain) into a java keystore
# and specify use-embedded-keystore: false and the keystore-file,keystore-password and certpassword configuration properties.
# Refer to the java keystore documentation for that.

#keystore-file: /path/to/keystore/file
#keystore-password: password
#certpassword: password

### Initializer

# A custom initializer implmenting the io.uiam.init.Initializer interface
# Can be used to inizialize data or add global transformers, checkers or security predicates

#initializer-class: io.uiam.init.impl.TestInitializer

### Security

# uIAM security is pluggable, you can provide you own 
# implementations of Authentication Mechanisms, Identity Manager 
# and Access Manager

# Identity Authentication Manager 
# All requests are bound to the specified user

## Authentication Mechanisms

## Provied AMs are:
## - BasicAuthenticationMechanism - basic authentication
## - AuthTokenBasicAuthenticationMechanism - uses the auth token to authenticate, 
###   requires auth-token: true, 
###   must be declared before the BasicAuthenticationMechanism that authenticates the client to generate the auth token 
## - IdentityAuthenticationMechanism - all requests are bound to the specified user

auth-mechanisms:
    - implementation-class: io.uiam.plugins.authentication.impl.AuthTokenBasicAuthenticationMechanism
      args: uIAM Realm
    - implementation-class: io.uiam.plugins.authentication.impl.BasicAuthenticationMechanism
      args: uIAM Realm
#    - implementation-class: io.uiam.plugins.authentication.impl.IdentityAuthenticationMechanism
#      args:
#        - username: a
#          pwd: a

## Identity Manager

## Provied IMs are:
## - SimpleFileIdentityManager - an IDM that uses a file as userbase storage
### conf-file paths are either absolute (starting with /)
## or relative to the uiam.jar directory

idm:
    implementation-class: io.uiam.plugins.authentication.impl.SimpleFileIdentityManager
    conf-file: ../etc/security.yml

## Access Manager

## Provied AMs are:
## - SimpleFileAccessManager  - an AM that uses a file as ACL storage
### conf-file paths are either absolute (starting with /)
## or relative to the uiam.jar directory

access-manager:
    implementation-class: io.uiam.plugins.authorization.impl.SimpleFileAccessManager
    conf-file: ../etc/security.yml
 
# Authentication Token

# Note: you need to pay attention to the authentitcation token in case of multi-node deployments (horizontal scalability).
# In this case, you need to either disable it or use a load balancer with the sticky session option
# or use a distributed auth token cache implementation (not provided in the current version).

auth-token-enabled: true
auth-token-ttl: 15

#### Services

# uIAM allows exposing custom services
# The servuce class must extend the io.uiam.plugins.service.PluggableService
# and can be bound to an URI via the service option

# Two built-in services are defined:
# - PingService bound to /ping that implements a simple ping service
# - GetRoleService bound to /roles that returns the user authentication status and eventually its roles

services:
    - implementation-class: io.uiam.plugins.service.impl.PingService
      uri: /ping
      secured: false
      args:
          msg: "ciao from the uIAM team"
    - implementation-class: io.uiam.plugins.service.impl.GetRoleService
      uri: /roles
      secured: false
      args:
          url: /roles
    - implementation-class: io.uiam.plugins.service.impl.RequestDumperService
      uri: /dump
      secured: false

#### Logging

# enable-log-console: true => log messages to the console (default value: true)
# enable-log-file: true => log messages to a file (default value: true)
# log-file-path: to specify the log file path (default value: uiam.log in system temporary directory)
# log-level: to set the log level. Value can be OFF, ERROR, WARN, INFO, DEBUG, TRACE and ALL. (default value is INFO)
# requests-log-level: log the request-response. 0 => no log, 1 => light log, 2 => detailed dump
# requests-log-trace-headers: add the HTTP headers you want to be put on the MDC for logback. Use with %X{header-name} in logback.xml.
#                             Useful for tracing support in the logs. Leave empty to deactivate this feature.
# metrics-gathering-level: metrics gathering for which level? OFF => no gathering, ROOT => gathering at root level,
#                          DATABASE => at db level, COLLECTION => at collection level
# WARNING: use requests-log-level level 2 only for development purposes, it logs user credentials (Authorization and Auth-Token headers)

enable-log-file: true
log-file-path: /var/log/uiam.log
enable-log-console: true
log-level: DEBUG
requests-log-level: 1
requests-log-trace-headers:

#### Performace Settings

# In order to save bandwitdth uIAM can force requests to support the giz encoding (if not, requests will be rejected)
force-gzip-encoding: false

# local-cache allows to cache the db and collection properties to drammatically improve performaces.
# Without caching, a GET on a document would requires two additional queries to retrieve the db and the collection properties.
# Pay attention to local caching only in case of multi-node deployments (horizontal scalability).
# In this case a change in a db or collection properties would reflect on other nodes at worst after the TTL (cache entries time to live).
# In most of the cases Dbs and collections properties only change at development time.

local-cache-enabled: true
# TTL in milliseconds; specify a value < 0 to never expire cached entries
local-cache-ttl: 1000

schema-cache-enabled: true
# TTL in milliseconds; specify a value < 0 to never expire cached entries
schema-cache-ttl: 60000

# Limit for the maximum number of concurrent requests being served
requests-limit: 1000

# Time limit in milliseconds for processing queries on the server (without network latency). 0 means no time limit
query-time-limit: 0

# Time limit in milliseconds for processing aggregations on the server (without network latency). 0 means no time limit
aggregation-time-limit: 0

# Number of I/O threads created for non-blocking tasks. at least 2. suggested value: core*2
io-threads: 2

# Number of threads created for blocking tasks (such as ones involving db access). suggested value: core*16
worker-threads: 8

# Use 16k buffers for best performance - as in linux 16k is generally the default amount of data that can be sent in a single write() call
buffer-size: 16384
buffers-per-region: 20
# Should the buffer pool use direct buffers, this instructs the JVM to use native (if possible) I/O operations on the buffers
direct-buffers: true

#### Connetction Options
## see http://undertow.io/undertow-docs/undertow-docs-2.0.0/index.html#common-listener-options

connection-options:
    # The maximum size of a HTTP header block, in bytes. 
    # If a client sends more data that this as part of the request header then the connection will be closed. 
    # Defaults to 1Mbyte.
    MAX_HEADER_SIZE: 1048576

    # The default maximum size of a request entity. 
    # Defaults to unlimited.
    MAX_ENTITY_SIZE: -1
    
     #The default maximum size of the HTTP entity body when using the mutiltipart parser.
     # Generall this will be larger than MAX_ENTITY_SIZE
     # If this is not specified it will be the same as MAX_ENTITY_SIZE
    MULTIPART_MAX_ENTITY_SIZE: -1
    
    # The idle timeout in milliseconds after which the channel will be closed.
    # If the underlying channel already has a read or write timeout set 
    # the smaller of the two values will be used for read/write timeouts.
    # Defaults to unlimited (-1).
    IDLE_TIMEOUT: -1
    
    # The maximum allowed time of reading HTTP request in milliseconds.
    # -1 or missing value disables this functionality.
    REQUEST_PARSE_TIMEOUT: -1
    
    # The amount of time the connection can be idle with no current requests 
    # before it is closed;
    # Defaults to unlimited (-1).
    NO_REQUEST_TIMEOUT: -1

    # The maximum number of query parameters that are permitted in a request. 
    # If a client sends more than this number the connection will be closed. 
    # This limit is necessary to protect against hash based denial of service attacks. 
    # Defaults to 1000.
    MAX_PARAMETERS: 1000

    # The maximum number of headers that are permitted in a request. 
    # If a client sends more than this number the connection will be closed. 
    # This limit is necessary to protect against hash based denial of service attacks. 
    # Defaults to 200.
    MAX_HEADERS: 200

    # The maximum number of cookies that are permitted in a request. 
    # If a client sends more than this number the connection will be closed. 
    # This limit is necessary to protect against hash based denial of service attacks. 
    # Defaults to 200.
    MAX_COOKIES: 200

    # The charset to use to decode the URL and query parameters. 
    # Defaults to UTF-8.
    URL_CHARSET: UTF-8
    
    # If this is true then a Connection: keep-alive header will be added to responses, 
    # even when it is not strictly required by the specification.
    # Defaults to true
    ALWAYS_SET_KEEP_ALIVE: true
    
    # If this is true then a Date header will be added to all responses. 
    # The HTTP spec says this header should be added to all responses, 
    # unless the server does not have an accurate clock.
    # Defaults to true
    ALWAYS_SET_DATE: true
